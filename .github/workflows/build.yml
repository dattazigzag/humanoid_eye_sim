name: ArtNetSender Build and Export

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      SKETCH_PATH: "Processing/ArtNetSender"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxrender1 libxtst6 libxi6
        
    - name: Download and install Processing
      run: |
        # Download the Processing package
        wget "https://github.com/processing/processing4/releases/download/processing-1297-4.3.4/processing-4.3.4-linux-x64.tgz"
        # Extract it to the current directory
        tar -xzf processing-4.3.4-linux-x64.tgz
        # Make the processing-java command executable
        chmod +x processing-4.3.4/processing-java
        
    - name: Setup Processing sketchbook and preferences
      run: |
        # Create the sketchbook libraries directory structure
        mkdir -p $HOME/sketchbook/libraries
        
        # Create Processing preferences file to set the sketchbook location
        mkdir -p $HOME/.processing
        echo "sketchbook.path=$HOME/sketchbook" > $HOME/.processing/preferences.txt
        
        # Also set as environment variable for scripts that might need it
        echo "PROCESSING_SKETCHBOOK=$HOME/sketchbook" >> $GITHUB_ENV
        
    - name: Install Processing libraries
      run: |
        cd $HOME/sketchbook/libraries
        
        # Video library
        echo "Installing Video library..."
        wget -q "https://github.com/processing/processing-video/releases/download/latest/video.zip"
        unzip -q video.zip
        rm video.zip
        
        # Drop library
        echo "Installing Drop library..."
        wget -q "https://transfluxus.github.io/drop/download/Drop-1.zip"
        mkdir -p Drop
        unzip -q Drop-1.zip -d Drop
        # Fix library structure if needed
        if [ ! -d "Drop/library" ]; then
          if [ -d "Drop/Drop" ]; then
            mv Drop/Drop/* Drop/
            rmdir Drop/Drop
          fi
          # Create library directory and move JARs if needed
          if [ ! -d "Drop/library" ]; then
            mkdir -p Drop/library
            mv Drop/*.jar Drop/library/ 2>/dev/null || true
          fi
        fi
        
        # ArtNet library - using the CORRECT URL provided
        echo "Installing ArtNet library..."
        # Create a directory for the library with proper naming
        mkdir -p ch.bildspur.artnet/library
        # Download using the correct URL
        wget -q "https://github.com/cansik/artnet4j/releases/download/0.6.2/artnet4j.zip"
        # Unzip directly to the library directory
        unzip -q artnet4j.zip -d ch.bildspur.artnet/library/
        
        # Create a proper library.properties file for Processing to recognize it
        cat > ch.bildspur.artnet/library.properties << EOF
        name=ArtNet (Bildspur)
        category=Data
        authorList=cansik
        url=https://github.com/cansik/artnet4j
        sentence=ArtNet library for Processing
        paragraph=Allows sending DMX data over ArtNet protocol
        version=0.6.2
        prettyVersion=0.6.2
        EOF
        
        # Syphon library
        echo "Installing Syphon library..."
        wget -q "https://github.com/Syphon/Processing/releases/download/latest/Syphon.zip"
        unzip -q Syphon.zip
        rm Syphon.zip
        
        # ControlP5 library
        echo "Installing ControlP5 library..."
        wget -q "https://github.com/sojamo/controlp5/releases/download/v2.2.5/controlP5-2.2.5.zip"
        mkdir -p controlP5
        unzip -q controlP5-2.2.5.zip -d controlP5
        # Fix structure if needed
        if [ -d "controlP5/controlP5-2.2.5" ]; then
          mv controlP5/controlP5-2.2.5/* controlP5/
          rmdir controlP5/controlP5-2.2.5
        fi
        
        # Print detailed information about installed libraries
        echo "===== LIBRARY STRUCTURE ====="
        ls -la
        echo ""
        echo "===== DETAILED LIBRARY CONTENTS ====="
        find . -type d | sort
        echo ""
        echo "===== JAR FILES ====="
        find . -name "*.jar" | sort
        
    - name: Set up virtual display for headless operation
      run: |
        # Start a virtual X server for headless operation
        Xvfb :1 -screen 0 1024x768x24 &
        echo "DISPLAY=:1" >> $GITHUB_ENV
        
    - name: Run sketch as test before export
      run: |
        echo "Testing sketch compilation..."
        xvfb-run ./processing-4.3.4/processing-java --sketch=$GITHUB_WORKSPACE/$SKETCH_PATH --build
        
    - name: Export binaries for macOS (Intel)
      run: |
        mkdir -p $GITHUB_WORKSPACE/output
        
        echo "Exporting for macOS (Intel)..."
        xvfb-run ./processing-4.3.4/processing-java --sketch=$GITHUB_WORKSPACE/$SKETCH_PATH --export --variant=macosx-x86_64 --output=$GITHUB_WORKSPACE/output/macosx-intel
        
    - name: List exported files
      run: |
        echo "Exported binaries:"
        find $GITHUB_WORKSPACE/output -type f -not -path "*/\.*" | sort
        
    - name: Upload macOS Intel binary as artifact
      uses: actions/upload-artifact@v3
      with:
        name: artnet-sender-macosx-intel
        path: ${{ github.workspace }}/output/macosx-intel