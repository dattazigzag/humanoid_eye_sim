name: ArtNetSender Build and Export

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      SKETCH_PATH: "Processing/ArtNetSender"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxrender1 libxtst6 libxi6
        
    - name: Download and install Processing
      run: |
        wget "https://github.com/processing/processing4/releases/download/processing-1297-4.3.4/processing-4.3.4-linux-x64.tgz"
        tar -xzf processing-4.3.4-linux-x64.tgz
        chmod +x processing-4.3.4/processing-java
        
    - name: Setup Processing sketchbook
      run: |
        # Create the sketchbook and libraries directories
        mkdir -p $HOME/sketchbook/libraries
        
        # Create Processing preferences file
        mkdir -p $HOME/.processing
        echo "sketchbook.path=$HOME/sketchbook" > $HOME/.processing/preferences.txt
        
        # Set environment variable
        echo "PROCESSING_SKETCHBOOK=$HOME/sketchbook" >> $GITHUB_ENV
        
    - name: Install Processing libraries (preserving full folder structures)
      run: |
        # Change to the libraries directory
        cd $HOME/sketchbook/libraries
        
        # Video library - extract directly to libraries folder
        echo "Installing Video library..."
        wget -q "https://github.com/processing/processing-video/releases/download/latest/video.zip"
        unzip -q video.zip
        
        # Drop library - special case, may need manual handling
        echo "Installing Drop library..."
        wget -q "https://transfluxus.github.io/drop/download/Drop-1.zip"
        # First try extracting directly
        unzip -q Drop-1.zip
        # Check if Drop folder exists, if not, create it and move files there
        if [ ! -d "Drop" ]; then
          mkdir -p Drop/library
          # Look for JAR files from the extraction and move them
          find . -maxdepth 1 -name "Drop*.jar" -exec mv {} Drop/library/ \;
          # Create a basic library.properties file
          cat > Drop/library.properties << EOF
          name=Drop
          category=Data
          authorList=Ramin Soleymani
          url=https://github.com/transfluxus/drop
          sentence=Drag and Drop for Processing
          paragraph=Library for drag and drop support
          version=1.0
          prettyVersion=1.0
          EOF
        fi
        
        # ArtNet library - needs special handling
        echo "Installing ArtNet library..."
        wget -q "https://github.com/cansik/artnet4j/releases/download/0.6.2/artnet4j.zip"
        
        # Create a proper Processing library structure for ArtNet
        mkdir -p "ch.bildspur.artnet/library"
        # Extract the JAR files into the library folder
        unzip -q artnet4j.zip -d /tmp/artnet-temp
        # Move JAR files to the library folder
        mv /tmp/artnet-temp/*.jar "ch.bildspur.artnet/library/"
        # Create necessary library.properties file
        cat > "ch.bildspur.artnet/library.properties" << EOF
        name=ArtNet
        category=Data
        authorList=cansik
        url=https://github.com/cansik/artnet4j
        sentence=ArtNet DMX library for Processing
        paragraph=Allows communication over the ArtNet protocol for DMX control
        version=0.6.2
        prettyVersion=0.6.2
        EOF
        
        # Syphon library
        echo "Installing Syphon library..."
        wget -q "https://github.com/Syphon/Processing/releases/download/latest/Syphon.zip"
        unzip -q Syphon.zip
        
        # ControlP5 library
        echo "Installing ControlP5 library..."
        wget -q "https://github.com/sojamo/controlp5/releases/download/v2.2.5/controlP5-2.2.5.zip"
        # Try direct extraction first
        unzip -q controlP5-2.2.5.zip
        # Check if it created a controlP5 directory
        if [ ! -d "controlP5" ]; then
          # It might have created a directory with the version number
          if [ -d "controlP5-2.2.5" ]; then
            mv controlP5-2.2.5 controlP5
          else
            # As a fallback, create the structure manually
            mkdir -p controlP5/library
            find . -maxdepth 1 -name "controlP5*.jar" -exec mv {} controlP5/library/ \;
            # Create library.properties
            cat > controlP5/library.properties << EOF
        name=ControlP5
        category=GUI
        authorList=Andreas Schlegel
        url=http://www.sojamo.de/libraries/controlP5/
        sentence=GUI controls for Processing
        paragraph=ControlP5 is a GUI library for Processing that provides a wide range of controllers
        version=2.2.5
        prettyVersion=2.2.5
        EOF
          fi
        fi
        
        # Display detailed directory structure for debugging
        echo "===== LIBRARY DIRECTORY STRUCTURE ====="
        find . -type d | sort
        
        echo "===== LIBRARY FILES ====="
        find . -type f | grep -E "\.(jar|properties)$" | sort
        
        # Show actual library.properties files to verify correct structure
        echo "===== LIBRARY PROPERTIES FILES ====="
        for prop in $(find . -name "library.properties"); do
          echo "--- $prop ---"
          cat "$prop"
          echo ""
        done
        
        # Verify JAR files in each library directory
        echo "===== JAR FILES BY LIBRARY ====="
        for lib in $(find . -maxdepth 1 -type d | grep -v "^\.$"); do
          echo "Library: $lib"
          find "$lib" -name "*.jar" | sort
          echo ""
        done
        
    - name: Set up virtual display for headless operation
      run: |
        # Start Xvfb 
        Xvfb :1 -screen 0 1024x768x24 &
        sleep 2  # Give it time to initialize
        echo "DISPLAY=:1" >> $GITHUB_ENV
        
    # - name: Run sketch as test before export
    #   run: |
    #     echo "Testing sketch compilation..."
    #     # Print all imports from the sketch for debugging
    #     echo "Sketch imports:"
    #     grep -r "import " $GITHUB_WORKSPACE/$SKETCH_PATH
        
    #     # Test compilation with detailed output
    #     PROCESSING_LOG=true xvfb-run ./processing-4.3.4/processing-java --sketch=$GITHUB_WORKSPACE/$SKETCH_PATH --build --verbose
        
    - name: Export binaries for macOS (Intel)
      run: |
        mkdir -p $GITHUB_WORKSPACE/output
        
        echo "Exporting for macOS (Intel)..."
        xvfb-run ./processing-4.3.4/processing-java --sketch=$GITHUB_WORKSPACE/$SKETCH_PATH --export --variant=macosx-x86_64 --output=$GITHUB_WORKSPACE/output/macosx-intel
        
    - name: List exported files
      run: |
        echo "Exported binaries:"
        find $GITHUB_WORKSPACE/output -type f -not -path "*/\.*" | sort
        
    # - name: Upload macOS Intel binary as artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: artnet-sender-macosx-intel
    #     path: ${{ github.workspace }}/output/macosx-intel